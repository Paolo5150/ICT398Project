#pragma once

#include "../Core/Component.h"
#include "../Emotion/Need.h"
#include "../Emotion/Stimuli.h"
#include "../Emotion/Trait.h"

#include <list>
#include <map>
#include <string>

class AffordanceAgent;

/**
* @class AIEmotion
* @brief Emotion component for managing AI Personality and Needs
*
*
* Maintains ownership of the Traits and Needs of this AI, as well as incoming stimuli generated by AIEmotionManager class
*
* @author Drew Paridaens
* @version 01
* @date 22/09/2019
*
*
* @bug No known bugs.
*/
class AIEmotion :
	public Component
{
public:
	AIEmotion();
	AIEmotion(std::string name, std::string personality);
	~AIEmotion();
	void AddStimuli(const Stimuli& stimuli);
	bool HasNeedType(Need::NeedType needType);
	std::string GetName();
	float GetNeedValue(Need::NeedType needType);
	void OnAttach(GameObject* go) override;
	void Start() override;
	void EngineUpdate() override;
	bool GetSeeking();
	void SetSeeking(float newSeeking);

private:
	std::string name;
	bool seeking = true;
	std::string personalityName;
	Need* currentlySeekedNeed = nullptr;
	AffordanceAgent* aa = nullptr;
	bool LoadPersonality();
	std::map<Need::NeedType, std::unique_ptr<Need>> needs = std::map<Need::NeedType, std::unique_ptr<Need>>();
	std::list<std::unique_ptr<Trait>> traits = std::list<std::unique_ptr<Trait>>();
	std::list<std::unique_ptr<Stimuli>> effectedStimuli = std::list<std::unique_ptr<Stimuli>>();
	void UpdateStimuli();
	void SeekNeeds();

};

